/* Sample program
* in c- language -
  *computes factorial
*/
int x3f5=1;
int circle(int x_3f5,int _f3act){ 
  if (_f3act < 50){
    //don't compute if x_3f5 <= 0 }**/
    //fafaj :="temp";
    // dafdfad:='t';
    while(_f3act<=3){
        x_3f5 = _f3act * x_3f5;
        _f3act=_f3act+1;
    }
  } 
  return x_3f5;
}

void main(){
  int temp;
  temp=circle(x3f5,1);

  return;
}

/*
1. program → declaration-list
2. declaration-list → declaration { declaration }
3. declaration → type-specifier ID [ \[ NUM \] ]; |
                   type-specifier ID (params) compound-stmt
5. type-specifier → int | void
7. params → param-list | void
8. param-list→ param { , param }
9. param → type-specifier ID | type-specifier ID \[ \]
10. compound-stmt → \{ local-declarations statement-list \}
11. local-declarations → empty { var-declaration local declarations }
12. statement-list → empty { statement statement-list}
13. statement → expression-stmt | compound-stmt| selection-stmt
	                        | iteration-stmt | return-stmt
14. expression-stmt → expression ; | ;
15. selection-stmt → if (expression) statement [ else statement ] 
16. iteration-stmt → while ( expression ) statement
17. return-stmt → return ; | return expression;
18. expression → var = expression | simple-expression
19. var → ID | ID \[ expression \]
20. simple-expression → additive-expression [ relop additive-expression ]
21. relop → <= | < | > | >= | == | !=
22. additive-expression → term { addop term additive-expression }
23. addop → + | -
24. term → factor { mulop factor term }
25. mulop → * | /
26. factor → ( expression ) | var | call | NUM
27. call → ID ( args )
28. args → arg-list | empty
29. arg-list → expression { , expression }
*/